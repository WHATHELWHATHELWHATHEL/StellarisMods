#########################################
#
# Henrik's Test Events
#
#########################################

namespace = henrik
planet_event = {
    id = henrik.31
    hide_window = yes

    trigger = { always = no }

    immediate = {
        set_planet_size = 20
    }
}

planet_event = {
	id = henrik.24
	hide_window = yes
	trigger = { always = no }

	immediate = {
		solar_system = {
			random_system_planet = {
				save_global_event_target_as = destruction_target
			}
		}
		create_fleet = {
			name = "NAME_mardak_vol_haters_colossus"
			settings = {
				spawn_debris = no
				is_boss = yes
			}
			effect = {
				set_owner = event_target:colossus_owner
				create_ship = {
					name = "Mardak Crusher"
					design = "NAME_mardak_vol_haters_colossus"
					graphical_culture = "mammalian_01"
				}
				set_location = {
					target = event_target:destruction_target
					distance = 200
					angle = 150
				}
				set_fleet_stance = passive
				set_aggro_range_measure_from = self
				set_aggro_range = 20
				queue_actions = {
					destroy_planet = {
						skip_rules = yes
						target = event_target:destruction_target
					}
				}
			}
		}
	}
}

#########################################
#
# Dee's Test Events
#
#########################################

namespace = dee


planet_event = {
	id = dee.1
	hide_window = yes
	trigger = { always = no }

	immediate = {
		solar_system = {
			create_country = {
				name = "NAME_Tiyanki_Space_Whale_Ancient"
				type = guardian_elderly_tiyanki
				flag = {
					icon = {
						category = "zoological"
						file = "flag_zoological_17.dds"
					}
					background = {
						category = "backgrounds"
						file = "00_solid.dds"
					}
					colors = {
						"blue"
						"blue"
						"null"
						"null"
					}
				}
			}
			last_created_country = {
				if = {
					limit = { NOT = { has_modifier = elderly_tiyanki_power } }
					add_modifier = { modifier = elderly_tiyanki_power days = -1 }
				}					
				guardian_difficulty = yes
				save_global_event_target_as = elderly_tiyanki_country
			}
			random_system_planet = {
				limit = { is_star = no }
				save_event_target_as = new_location
			}
			random_system_planet = {
				limit = { is_star = yes }
				save_event_target_as = start_point
				event_target:elderly_tiyanki_country = {
					create_fleet = {
						name = "NAME_Elderly_Tiyanki"
						settings = {
							spawn_debris = no
							is_boss = yes
						}
						effect = {
							set_owner = event_target:elderly_tiyanki_country
							create_ship = {
								name = "NAME_Elder"
								design = "NAME_Progenitor"
							}
							set_location = event_target:start_point
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 50
							save_global_event_target_as = elderly_tiyanki_fleet
							auto_move_to_planet = {
								target = event_target:new_location
								clear_auto_move_on_arrival = no		# distar.136 sets a new auto 	move target
							}
						}
					}
				}
			}
		}
	}
}


planet_event = {
	id = dee.2
	hide_window = yes
	trigger = { always = no }

	immediate = {
		set_planet_entity = {
			picture = pc_junkheap
		}
	}
}

#########################################
#
# Miranda's Test Events
#
#########################################

# Spawning the hatchling
planet_event = {
	id = henrik.25
	hide_window = yes

	trigger = { always = no }

	immediate = {
		save_event_target_as = hatchling_egg
		set_planet_entity = {
			entity = "infected_planet_01_stage_3_entity"
		}

		if = {
			limit = {
				exists = owner
			}
			owner = {
				save_global_event_target_as = egg_owner
			}
		}
		change_pc = pc_egg_cracked
		destroy_colony = yes
		clear_deposits = yes
		orbital_deposit_tile = {
			clear_deposits = yes
			add_deposit = d_immense_society_deposit
			add_deposit = d_immense_society_deposit
			add_deposit = d_immense_society_deposit
			add_deposit = d_immense_society_deposit
			add_deposit = d_immense_society_deposit
  		}

		remove_modifier = seismological_phenomena_2
		solar_system = {
			random_system_planet = {
				limit = { is_star = no }
				save_event_target_as = new_location
			}
		}
		create_country = {
			name = "NAME_Voidspawn"
			type = guardian_hatchling
			flag = {
				icon = {
					category = "spherical"
					file = "flag_spherical_6.dds"
				}
				background = {
					category = "backgrounds"
					file = "00_solid.dds"
				}
				# TODO FLAG
				colors = {
					"red"
					"red"
					"null"
					"null"
				}
			}
			effect = {
				if = {
					limit = {
						NOT = {
							has_modifier = hatchling_power
						}
					}
					add_modifier = {
						modifier = hatchling_power
						days = -1
					}
				}
				guardian_difficulty = yes
				save_global_event_target_as = hatchling_country
				set_country_flag = hatchling_country
				if = {
					limit = {
						exists = event_target:egg_owner
					}
					event_target:egg_owner = {
						establish_communications_no_message = event_target:hatchling_country
					}
				}
				else_if = {
					limit = {
						root = {
							solar_system = {
								has_owner = yes
							}
						}
					}
					root.solar_system.owner = { 
						establish_communications_no_message = event_target:hatchling_country 
					}
				}
				create_fleet = {
					name = "NAME_Voidspawn"
					settings = {
						spawn_debris = no
						is_boss = yes
					}
					effect = {
						set_owner = event_target:hatchling_country
						create_ship = {
							#name = "NAME_Voidspawn"
							#design = "NAME_Voidspawn"
							name = NAME_Nanite_Dragon
							design = NAME_Nanite_Dragon
							effect = {
								set_ship_flag = hatchling_ship
								save_global_event_target_as = hatchling
								set_disabled = yes
							}
						}
						save_global_event_target_as = hatchling_fleet
						set_location = {
							target = event_target:hatchling_egg
							distance = 0
							angle = 90
							direction = in_system
						}
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = self #or return_point
						set_aggro_range = 300
						auto_move_to_planet = {
							target = event_target:new_location
							clear_auto_move_on_arrival = no	# distar.5008 sets a new auto move target
						}
					}
				}
			}
		}
		if = {
			limit = {
				exists = event_target:egg_owner
			}
			event_target:egg_owner = { 
				country_event = { id = distar.5007 } 
			} # Triggers Notification
		}
		else_if = {
			limit = {
				solar_system = {
					has_owner = yes
				}
			}
			solar_system = { owner = { country_event = { id = distar.5007 } } } # Triggers Notification
		}
	}
}

planet_event = {
	id = henrik.30
	hide_window = yes

	trigger = { always = no }

	immediate = {
		set_planet_size = 20
		change_pc = pc_shattered
		create_ambient_object = {
			type = dreadnought_object
			entity_face_object = root
		}
		last_created_ambient_object = {
			set_location = {
				target = root
				distance = -1
				#angle = 90
				#direction = in_system
			}
		}
	}
}